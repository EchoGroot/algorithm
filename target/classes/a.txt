public List<Map<String, Object>> queryAjxx(Map<String, String> param)
			throws NotFoundException {
        Map<String, Object> params = queryParamsConvert(param);
        Integer pageSize = convertValue(param.get("NPageSize"), Integer.class);
        Integer pageNo = convertValue(param.get("NPageNo"), Integer.class);
        if (isEmpty(params.get("jbfy")) || isEmpty(params.get("ajlx")) || pageSize == null || pageNo == null) {
            throw new NotFoundException("参数不合法");
        }
        Integer ajlx = (Integer) params.get("ajlx");
        if (!AJXXTABLES.containsKey(ajlx)) {
            throw new NotFoundException("未定义的案件类型");
        }

        String sql = getQuerySQL(params);
        IQueryInfo qp = new DefaultQueryInfo();

        qp.setCurrPageNo(pageNo);
        qp.setRowsPerPage(pageSize);
        IPagableData datazs = gyzjBaseDao.pageQueryBySql(sql, qp);
		List<Map<String, Object>> list = (List<Map<String, Object>>) datazs
				.getData();

		List<Map<String, Object>> res = new ArrayList<Map<String, Object>>();
        if (CollectionUtils.isEmpty(list)) {
            return res;
        }

		StringBuffer stb = new StringBuffer();
		for (int i = 0; i < list.size(); i++) {
			if (list.get(i).get("NAjlx").equals(GyNormalCodeConsts.N_XS)) {
				stb.append(TABLE_DSR_CONDITIONS.get(list.get(i).get("NAjlx")));
				stb.append(" where  C_BH_AJ= '").append(list.get(i).get("CAjId")).append("'");
				stb.append(" UNION ALL ");
				stb.append(QUERY_DSR_CONDITION_ZSR);
				stb.append(" where  C_BH_AJ= '").append(list.get(i).get("CAjId")).append("'");
				stb.append(" UNION ALL ");
				stb.append(QUERY_DSR_CONDITION_FDMSDSR);
				stb.append(" where  C_BH_AJ= '").append(list.get(i).get("CAjId")).append("'");
				stb.append(" UNION ALL ");
			} else {
				stb.append(TABLE_DSR_CONDITIONS.get(list.get(i).get("NAjlx")));
				stb.append(DSR_TABLES.get(list.get(i).get("NAjlx")));
				stb.append(" where  C_BH_AJ= '").append(list.get(i).get("CAjId")).append("'");
				stb.append(" UNION ALL ");
			}

        }
		stb.delete(stb.length() - 11, stb.length());
		List<Map<String, Object>> ajXX = (List<Map<String, Object>>) arteryJdbcDAO
				.getJdbcTemplate().queryForList(stb.toString());

		for (int i = 0; i < list.size(); i++) {
			Map<String, Object> m2 = new HashMap<String, Object>();
			for (Map.Entry<String, Object> entry : list.get(i).entrySet()) {
				if(entry.getKey().equals("NCbr")){
					m2.put(entry.getKey(),entry.getValue() == null ? "" : String.valueOf(entry.getValue()));
				}else{
					m2.put(entry.getKey(),entry.getValue() == null ? "" : entry.getValue());
				}
			}
			list.set(i, m2);
			List<Map<String, Object>> dsrxxlist = new ArrayList<Map<String, Object>>();
			for (int j = 0; j < ajXX.size(); j++) {
				if (list.get(i).get("CAjId").equals(ajXX.get(j).get("CBhaj"))) {
					// 下面会用到,根据公用方法获取诉讼地位c值,不同的案件类型需要用到ajlb,spcx及ywlx.
					Integer needAjlb = (Integer) list.get(i).get("NAjlx");
					Object needSpcx = null;
					Integer needCode = null;
					String needSsdw = StringUtils.EMPTY;
					Object NSsdw = null;
					if (GySysUtils.equals(needAjlb,
							GyNormalCodeConsts.N_QZQSYPC) || GySysUtils.equals(needAjlb,
									GyNormalCodeConsts.N_FB) || GySysUtils.equals(needAjlb,
											GyNormalCodeConsts.N_QT)) {
						needSpcx = list.get(i).get("NYwlx");
						// if ((list.get(i).get("NYwlx")) instanceof String) {
						// needSpcx = (String) list.get(i).get("NYwlx");
						// }
						// if ((list.get(i).get("NYwlx")) instanceof Integer) {
						// needSpcx = (Integer) list.get(i).get("NYwlx");
						// }
					} else {
						needSpcx = list.get(i).get("NSpcx");
						// if ((list.get(i).get("NSpcx")) instanceof String) {
						// needSpcx = (String) list.get(i).get("NSpcx");
						// }
						// if ((list.get(i).get("NSpcx")) instanceof Integer) {
						// needSpcx = (Integer) list.get(i).get("NSpcx");
						// }
					}
					Map<String, Object> m =new HashMap<String, Object>();
					for (Map.Entry<String, Object> entry : ajXX.get(j).entrySet()) {
						// 【吉林】材料收转接口需求：案件查询接口当事人信息增加诉讼地位c值（THYDXQ190627181152898253）
						m.put(entry.getKey(), entry.getValue()==null?"":entry.getValue());
						if (GySysUtils.equals("NSsdw", entry.getKey())) {
							NSsdw = entry.getValue();
							// 其他当事人默认就有C_SSDW,直接可以用.
							if (GySysUtils.equals(needAjlb,
									GyNormalCodeConsts.N_QT)) {
								m.put("CSsdw", entry.getValue() == null ? ""
										: entry.getValue());
							} else {
								// 法标当事人需要进行转换.
								if (GySysUtils.equals(needAjlb,
										GyNormalCodeConsts.N_FB)) {
									if (GySysUtils
											.equals(needSpcx,
													FbNormalCodeConsts.N_YWLX_QQTWDQSDWS)
											|| GySysUtils
													.equals(needSpcx,
															FbNormalCodeConsts.N_YWLX_QQXGTQSDWSSC)) {
										needCode = 10124018;
									} else if (GySysUtils
											.equals(needSpcx,
													FbNormalCodeConsts.N_YWLX_QQAMTQFYSDWSSC)) {
										needCode = 101250512;
									} else {
										needCode = 10115002;
									}
								} else {
									if (needSpcx instanceof String) {
										needCode = GyNormalCodeUtils
												.getSsdwBySpcx(
														needAjlb,
														StringUtils
																.isNotBlank((String) needSpcx) ? Integer
																.valueOf((String) needSpcx)
																: null);
									}
									if (needSpcx instanceof Integer) {
										needCode = GyNormalCodeUtils
												.getSsdwBySpcx(
														needAjlb,
														(Integer) (needSpcx != null
																&& needSpcx != "" ? needSpcx
																: null));
									}
								}
								needSsdw = ArteryNormalCodeUtil.getSubCodeName(
										ObjectUtils.toString(needCode),
										ObjectUtils.toString(NSsdw));
								// if (NSsdw instanceof String) {
								// needSsdw = ArteryNormalCodeUtil
								// .getSubCodeName(ObjectUtils
								// .toString(needCode),
								// ObjectUtils.toString(NSsdw));
								// }
								// if (NSsdw instanceof Integer) {
								// needSsdw = ArteryNormalCodeUtil
								// .getSubCodeName(ObjectUtils
								// .toString(needCode),
								// ObjectUtils.toString(NSsdw));
								// }
								m.put("CSsdw",
										StringUtils.isBlank(needSsdw) ? ""
												: needSsdw);
							}
						}

					}
					dsrxxlist.add(m);
				}
			}
			if(list.get(i).get("NCbr") != null){
				list.get(i).put("CCbrmc",ArteryOrganUtil.getUserNameById(ObjectUtils.toString(list.get(i).get("NCbr")))==null?"":ArteryOrganUtil.getUserNameById(ObjectUtils.toString(list.get(i).get("NCbr"))));
			}
			if(list.get(i).get("NCbspt") != null){
				list.get(i).put("NCbspt",ObjectUtils.toString(list.get(i).get("NCbspt"))==null?"":ObjectUtils.toString(list.get(i).get("NCbspt")));
				list.get(i).put("CCbsptmc",ArteryOrganUtil.getDeptNameById(String.valueOf(list.get(i).get("NCbspt")))==null?"":ArteryOrganUtil.getDeptNameById(ObjectUtils.toString(list.get(i).get("NCbspt"))));
			}
			if(list.get(i).get("NYwlx") != null){
				list.get(i).put("CYwlx",ArteryNormalCodeUtil.getSubCodeName("10101231",ObjectUtils.toString(list.get(i).get("NYwlx")))==null?"":ArteryNormalCodeUtil.getSubCodeName("10101231",ObjectUtils.toString(list.get(i).get("NYwlx"))));
			}
			if(list.get(i).get("NAjjzjd") != null){
				list.get(i).put("CAjjzjd",ArteryNormalCodeUtil.getSubCodeName("10101106",ObjectUtils.toString(list.get(i).get("NAjjzjd")))==null?"":ArteryNormalCodeUtil.getSubCodeName("10101106",ObjectUtils.toString(list.get(i).get("NAjjzjd"))));
			}
			if(list.get(i).get("NAjlx") != null){
				list.get(i).put("CAjlx",ArteryNormalCodeUtil.getSubCodeName("10101033",ObjectUtils.toString(list.get(i).get("NAjlx")))==null?"":ArteryNormalCodeUtil.getSubCodeName("10101033", ObjectUtils.toString(list.get(i).get("NAjlx"))));
			}
			if(list.get(i).get("NAjbs") != null){
    			list.get(i).put("NAjbs", ObjectUtils.toString(list.get(i).get("NAjbsnew"))==null? get15FbAjbs(list.get(i)): ObjectUtils.toString(list.get(i).get("NAjbsnew")));
    		}
			list.get(i).put("dsrXx", dsrxxlist);
		}
		return list;
    }